#include <Windows.h>

#include <chrono>
#include <iostream>
#include <vector>

#include "solution.h"
using chrono_clock = std::chrono::high_resolution_clock;
#define TIME_DIFF(x, y) \
  std::chrono::duration_cast<std::chrono::milliseconds>((y) - (x)).count()
int main() {
  /*
  The input might be generated by reading data from files.
  */
  std::vector<std::vector<std::vector<int>>> dataset1A = {
      {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}};
  std::vector<std::vector<int>> dataset1x = {{1, 0, 0}};

  long long timeDiffSum1 = 0;
  const int L1 = dataset1A.size();
  /*
  round 1 example
  */
  for (int i = 0; i < L1; i++) {
    auto s = smartmore::Solution();
    auto start = chrono_clock::now();
    clock_t start2 = clock();
    float result = s.clacModule<int>(dataset1A[i], dataset1x[i]);
    clock_t end2 = clock();
    auto end = chrono_clock::now();
    timeDiffSum1 += TIME_DIFF(start, end);

    std::cout << "Running time : " << double(end2 - start2) / CLOCKS_PER_SEC
              << "s" << std::endl;
  }
  std::cout << "Round 1 result = " << timeDiffSum1 << std::endl;

  return 0;
}